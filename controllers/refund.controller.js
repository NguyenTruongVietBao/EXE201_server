const Refund = require('../models/Refund');
const Payment = require('../models/Payment');
const Commission = require('../models/Commission');
const SellerWallet = require('../models/SellerWallet');
const PlatformWallet = require('../models/PlatformWallet');
const Enrollment = require('../models/Enrollment');

// Customer t·∫°o y√™u c·∫ßu ho√†n ti·ªÅn
exports.createRefundRequest = async (req, res) => {
  try {
    const { paymentId, reason, bankDetails } = req.body;
    const customerId = req.user._id;

    // Validate input
    if (!paymentId || !reason || !bankDetails) {
      return res.status(400).json({
        status: false,
        statusCode: 400,
        message: 'paymentId, reason v√† bankDetails l√† b·∫Øt bu·ªôc',
        data: null,
      });
    }

    if (reason.trim().length < 10) {
      return res.status(400).json({
        status: false,
        statusCode: 400,
        message: 'L√Ω do t·ªëi thi·ªÉu 10 k√Ω t·ª±',
        data: null,
      });
    }

    // Validate bankDetails
    if (
      !bankDetails.bankName ||
      !bankDetails.bankAccountName ||
      !bankDetails.bankAccountNumber
    ) {
      return res.status(400).json({
        status: false,
        statusCode: 400,
        message:
          'Th√¥ng tin ng√¢n h√†ng kh√¥ng ƒë·∫ßy ƒë·ªß (bankName, bankAccountName, bankAccountNumber)',
        data: null,
      });
    }

    // Ki·ªÉm tra xem c√≥ th·ªÉ t·∫°o refund kh√¥ng
    const { canRefund, reason: errorReason } = await Refund.canCreateRefund(
      paymentId
    );
    if (!canRefund) {
      return res.status(400).json({
        status: false,
        statusCode: 400,
        message: errorReason,
        data: null,
      });
    }

    // L·∫•y th√¥ng tin payment
    const payment = await Payment.findById(paymentId)
      .populate('documentId', 'title')
      .populate('sellerId', 'name email');

    // Ki·ªÉm tra quy·ªÅn c·ªßa customer
    if (payment.userId.toString() !== customerId.toString()) {
      return res.status(403).json({
        status: false,
        statusCode: 403,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o khi·∫øu n·∫°i cho thanh to√°n n√†y',
        data: null,
      });
    }

    // T·∫°o refund request - CH·ªà T·∫†O RECORD, CH∆ØA TR·ª™ TI·ªÄN G√å
    // Ti·ªÅn s·∫Ω ch·ªâ b·ªã tr·ª´ khi manager APPROVED request n√†y
    const refund = await Refund.create({
      paymentId: payment._id,
      customerId,
      documentId: payment.documentId._id,
      sellerId: payment.sellerId._id,
      reason: reason.trim(),
      amount: payment.amount,
      bankDetails: {
        bankName: bankDetails.bankName.trim(),
        bankAccountName: bankDetails.bankAccountName.trim(),
        bankAccountNumber: bankDetails.bankAccountNumber.trim(),
      },
    });

    console.log(
      `üìù Created refund request ${refund._id} for payment ${payment._id} - amount: ${payment.amount} VND`
    );

    // Populate ƒë·ªÉ tr·∫£ v·ªÅ th√¥ng tin ƒë·∫ßy ƒë·ªß
    const populatedRefund = await Refund.findById(refund._id)
      .populate('customerId', 'name email avatar')
      .populate('documentId', 'title price')
      .populate('sellerId', 'name email avatar')
      .populate('paymentId');

    res.status(201).json({
      status: true,
      statusCode: 201,
      message: 'T·∫°o y√™u c·∫ßu ho√†n ti·ªÅn th√†nh c√¥ng',
      data: populatedRefund,
    });
  } catch (error) {
    console.error('ERROR createRefundRequest:', error);
    res.status(500).json({
      status: false,
      statusCode: 500,
      message: 'L·ªói h·ªá th·ªëng',
      data: null,
    });
  }
};

// L·∫•y danh s√°ch refund requests c·ªßa customer
exports.getMyRefundRequests = async (req, res) => {
  try {
    const customerId = req.user._id;
    const { status } = req.query;

    const query = { customerId };
    if (status) {
      query.status = status;
    }

    const refunds = await Refund.find(query)
      .sort({ createdAt: -1 })
      .populate('documentId', 'title price imageUrls')
      .populate('sellerId', 'name email avatar')
      .populate('processedBy', 'name email');

    res.status(200).json({
      status: true,
      statusCode: 200,
      message: 'L·∫•y danh s√°ch y√™u c·∫ßu ho√†n ti·ªÅn th√†nh c√¥ng',
      data: refunds,
    });
  } catch (error) {
    console.error('ERROR getMyRefundRequests:', error);
    res.status(500).json({
      status: false,
      statusCode: 500,
      message: 'L·ªói h·ªá th·ªëng',
      data: null,
    });
  }
};

// L·∫•y chi ti·∫øt refund request
exports.getRefundDetails = async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user._id;

    const refund = await Refund.findById(id)
      .populate('customerId', 'name email avatar')
      .populate('documentId', 'title price imageUrls description')
      .populate('sellerId', 'name email avatar')
      .populate('processedBy', 'name email avatar')
      .populate('paymentId');

    if (!refund) {
      return res.status(404).json({
        status: false,
        statusCode: 404,
        message: 'Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu ho√†n ti·ªÅn',
        data: null,
      });
    }

    // Ki·ªÉm tra quy·ªÅn xem: customer ho·∫∑c admin
    const isCustomer = refund.customerId._id.toString() === userId.toString();
    const isAdmin = req.user.role === 'ADMIN';

    if (!isCustomer && !isAdmin) {
      return res.status(403).json({
        status: false,
        statusCode: 403,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem y√™u c·∫ßu ho√†n ti·ªÅn n√†y',
        data: null,
      });
    }

    res.status(200).json({
      status: true,
      statusCode: 200,
      message: 'L·∫•y chi ti·∫øt y√™u c·∫ßu ho√†n ti·ªÅn th√†nh c√¥ng',
      data: refund,
    });
  } catch (error) {
    console.error('ERROR getRefundDetails:', error);
    res.status(500).json({
      status: false,
      statusCode: 500,
      message: 'L·ªói h·ªá th·ªëng',
      data: null,
    });
  }
};

// Admin l·∫•y t·∫•t c·∫£ refund requests
exports.getAllRefundRequests = async (req, res) => {
  try {
    const { status, sortOrder = 'desc' } = req.query;

    const query = {};
    if (status) {
      query.status = status;
    }

    const sortOptions = { createdAt: sortOrder === 'asc' ? 1 : -1 };

    const refunds = await Refund.find(query)
      .sort(sortOptions)
      .populate('customerId', 'name email avatar')
      .populate('documentId', 'title price')
      .populate('sellerId', 'name email avatar')
      .populate('processedBy', 'name email');

    // Th·ªëng k√™ th√™m
    const [pendingCount, approvedCount, rejectedCount] = await Promise.all([
      Refund.countDocuments({ status: 'PENDING' }),
      Refund.countDocuments({ status: 'APPROVED' }),
      Refund.countDocuments({ status: 'REJECTED' }),
    ]);

    res.status(200).json({
      status: true,
      statusCode: 200,
      message: 'L·∫•y danh s√°ch y√™u c·∫ßu ho√†n ti·ªÅn th√†nh c√¥ng',
      data: {
        refunds,
        stats: {
          pending: pendingCount,
          approved: approvedCount,
          rejected: rejectedCount,
          total: pendingCount + approvedCount + rejectedCount,
        },
      },
    });
  } catch (error) {
    console.error('ERROR getAllRefundRequests:', error);
    res.status(500).json({
      status: false,
      statusCode: 500,
      message: 'L·ªói h·ªá th·ªëng',
      data: null,
    });
  }
};

// Admin x·ª≠ l√Ω refund request
exports.processRefundRequest = async (req, res) => {
  try {
    const { id } = req.params;
    const { status, adminResponse } = req.body;
    const adminId = req.user._id;

    // Validate input
    if (!['APPROVED', 'REJECTED'].includes(status)) {
      return res.status(400).json({
        status: false,
        statusCode: 400,
        message:
          'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n APPROVED ho·∫∑c REJECTED',
        data: null,
      });
    }

    if (!adminResponse || adminResponse.trim().length < 10) {
      return res.status(400).json({
        status: false,
        statusCode: 400,
        message: 'Ph·∫£n h·ªìi c·ªßa admin l√† b·∫Øt bu·ªôc v√† t·ªëi thi·ªÉu 10 k√Ω t·ª±',
        data: null,
      });
    }

    // T√¨m refund request
    const refund = await Refund.findById(id)
      .populate('paymentId')
      .populate('customerId', 'name email')
      .populate('documentId', 'title')
      .populate('sellerId', 'name email');

    if (!refund) {
      return res.status(404).json({
        status: false,
        statusCode: 404,
        message: 'Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu ho√†n ti·ªÅn',
        data: null,
      });
    }

    if (refund.status !== 'PENDING') {
      return res.status(400).json({
        status: false,
        statusCode: 400,
        message: 'Y√™u c·∫ßu ho√†n ti·ªÅn ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω',
        data: null,
      });
    }

    // C·∫≠p nh·∫≠t refund request
    refund.status = status;
    refund.adminResponse = adminResponse.trim();
    refund.processedBy = adminId;
    refund.processedAt = new Date(Date.now());

    if (status === 'APPROVED') {
      // CH·ªà KHI APPROVED m·ªõi th·ª±c s·ª± tr·ª´ ti·ªÅn t·ª´ wallet v√† x·ª≠ l√Ω ho√†n ti·ªÅn
      console.log(`‚úÖ Manager approved refund request ${refund._id}`);
      await processRefund(refund);
      refund.refundCompletedAt = new Date(Date.now());
    } else if (status === 'REJECTED') {
      // N·∫øu REJECTED, ch·ªâ c·∫≠p nh·∫≠t status, kh√¥ng tr·ª´ ti·ªÅn g√¨
      console.log(`‚ùå Manager rejected refund request ${refund._id}`);
    }

    await refund.save();

    // Populate ƒë·ªÉ tr·∫£ v·ªÅ th√¥ng tin ƒë·∫ßy ƒë·ªß
    const updatedRefund = await Refund.findById(refund._id)
      .populate('customerId', 'name email avatar')
      .populate('documentId', 'title price')
      .populate('sellerId', 'name email avatar')
      .populate('processedBy', 'name email avatar')
      .populate('paymentId');

    res.status(200).json({
      status: true,
      statusCode: 200,
      message: `Y√™u c·∫ßu ho√†n ti·ªÅn ƒë√£ ƒë∆∞·ª£c ${
        status === 'APPROVED' ? 'ch·∫•p nh·∫≠n' : 't·ª´ ch·ªëi'
      }`,
      data: updatedRefund,
    });
  } catch (error) {
    console.error('ERROR processRefundRequest:', error);
    res.status(500).json({
      status: false,
      statusCode: 500,
      message: 'L·ªói h·ªá th·ªëng',
      data: null,
    });
  }
};

// Helper function ƒë·ªÉ x·ª≠ l√Ω ho√†n ti·ªÅn
async function processRefund(refund) {
  try {
    console.log(
      `üîÑ Processing APPROVED refund for payment ${refund.paymentId._id}...`
    );

    // 1. T√¨m commission t∆∞∆°ng ·ª©ng
    const commission = await Commission.findOne({
      paymentId: refund.paymentId._id,
      status: 'PENDING',
    });

    if (commission) {
      // 2. Commission ch∆∞a ƒë∆∞·ª£c release - tr·ª´ t·ª´ pendingBalance
      console.log(
        `üí∞ Commission still PENDING - deducting from pending balances`
      );

      commission.status = 'REFUNDED';
      await commission.save();

      // 3. Tr·ª´ ti·ªÅn t·ª´ pending balance c·ªßa seller
      const sellerWallet = await SellerWallet.findOne({
        sellerId: refund.sellerId,
      });
      if (
        sellerWallet &&
        sellerWallet.pendingBalance >= commission.sellerAmount
      ) {
        sellerWallet.pendingBalance -= commission.sellerAmount;
        sellerWallet.totalEarned -= commission.sellerAmount;
        await sellerWallet.save();
        console.log(
          `üí∏ Deducted ${commission.sellerAmount} VND from seller pending balance`
        );
      }

      // 4. Tr·ª´ ti·ªÅn t·ª´ pending balance c·ªßa platform
      const platformWallet = await PlatformWallet.findOne();
      if (
        platformWallet &&
        platformWallet.pendingBalance >= commission.platformAmount
      ) {
        platformWallet.pendingBalance -= commission.platformAmount;
        platformWallet.totalBalance -= commission.platformAmount;
        platformWallet.totalCommissionEarned -= commission.platformAmount;
        await platformWallet.save();
        console.log(
          `üí∏ Deducted ${commission.platformAmount} VND from platform pending balance`
        );
      }
    } else {
      // 5. Commission ƒë√£ ƒë∆∞·ª£c release - tr·ª´ t·ª´ availableBalance
      const releasedCommission = await Commission.findOne({
        paymentId: refund.paymentId._id,
        status: 'RELEASED',
      });

      if (releasedCommission) {
        console.log(
          `üí∞ Commission already RELEASED - deducting from available balances`
        );

        releasedCommission.status = 'REFUNDED';
        await releasedCommission.save();

        // 6. Tr·ª´ t·ª´ available balance c·ªßa seller
        const sellerWallet = await SellerWallet.findOne({
          sellerId: refund.sellerId,
        });
        if (
          sellerWallet &&
          sellerWallet.availableBalance >= releasedCommission.sellerAmount
        ) {
          sellerWallet.availableBalance -= releasedCommission.sellerAmount;
          sellerWallet.totalEarned -= releasedCommission.sellerAmount;
          await sellerWallet.save();
          console.log(
            `üí∏ Deducted ${releasedCommission.sellerAmount} VND from seller available balance`
          );
        }

        // 7. Tr·ª´ t·ª´ available balance c·ªßa platform
        const platformWallet = await PlatformWallet.findOne();
        if (
          platformWallet &&
          platformWallet.availableBalance >= releasedCommission.platformAmount
        ) {
          platformWallet.availableBalance -= releasedCommission.platformAmount;
          platformWallet.totalBalance -= releasedCommission.platformAmount;
          await platformWallet.save();
          console.log(
            `üí∏ Deducted ${releasedCommission.platformAmount} VND from platform available balance`
          );
        }
      }
    }

    // 8. X√≥a enrollment c·ªßa customer (customer m·∫•t quy·ªÅn truy c·∫≠p t√†i li·ªáu)
    const deletedEnrollment = await Enrollment.findOneAndDelete({
      userId: refund.customerId,
      documentId: refund.documentId,
    });

    if (deletedEnrollment) {
      console.log(`üóëÔ∏è Removed enrollment for customer ${refund.customerId}`);
    }

    // 9. C·∫≠p nh·∫≠t payment status th√†nh REFUNDED
    await Payment.findByIdAndUpdate(refund.paymentId._id, {
      status: 'REFUNDED',
    });

    console.log(
      `‚úÖ Refund completed for payment ${refund.paymentId._id}, amount: ${refund.amount} VND`
    );
  } catch (error) {
    console.error('‚ùå ERROR processing refund:', error);
    throw error;
  }
}

// L·∫•y th·ªëng k√™ refund
exports.getRefundStats = async (req, res) => {
  try {
    const { startDate, endDate } = req.query;

    const dateFilter = {};
    if (startDate && endDate) {
      dateFilter.createdAt = {
        $gte: new Date(startDate),
        $lte: new Date(endDate),
      };
    }

    const [
      totalRefunds,
      pendingRefunds,
      approvedRefunds,
      rejectedRefunds,
      totalRefundAmount,
      approvedRefundAmount,
    ] = await Promise.all([
      Refund.countDocuments(dateFilter),
      Refund.countDocuments({ ...dateFilter, status: 'PENDING' }),
      Refund.countDocuments({ ...dateFilter, status: 'APPROVED' }),
      Refund.countDocuments({ ...dateFilter, status: 'REJECTED' }),
      Refund.aggregate([
        { $match: dateFilter },
        { $group: { _id: null, total: { $sum: '$amount' } } },
      ]),
      Refund.aggregate([
        { $match: { ...dateFilter, status: 'APPROVED' } },
        { $group: { _id: null, total: { $sum: '$amount' } } },
      ]),
    ]);

    res.status(200).json({
      status: true,
      statusCode: 200,
      message: 'L·∫•y th·ªëng k√™ refund th√†nh c√¥ng',
      data: {
        totalRefunds,
        pendingRefunds,
        approvedRefunds,
        rejectedRefunds,
        totalRefundAmount: totalRefundAmount[0]?.total || 0,
        approvedRefundAmount: approvedRefundAmount[0]?.total || 0,
      },
    });
  } catch (error) {
    console.error('ERROR getRefundStats:', error);
    res.status(500).json({
      status: false,
      statusCode: 500,
      message: 'L·ªói h·ªá th·ªëng',
      data: null,
    });
  }
};

exports.getSellerRefundRequests = async (req, res) => {
  try {
    const sellerId = req.user._id;
    const { status, sortOrder = 'desc' } = req.query;

    const query = { sellerId };
    if (status) {
      query.status = status;
    }

    const sortOptions = { createdAt: sortOrder === 'asc' ? 1 : -1 };

    const [refunds, total] = await Promise.all([
      Refund.find(query)
        .sort(sortOptions)
        .populate('customerId', 'name email avatar')
        .populate('documentId', 'title price imageUrls')
        .populate('processedBy', 'name email')
        .populate('paymentId', 'createdAt transactionCode'),
      Refund.countDocuments(query),
    ]);

    // Th·ªëng k√™ cho seller
    const [pendingCount, approvedCount, rejectedCount] = await Promise.all([
      Refund.countDocuments({ sellerId, status: 'PENDING' }),
      Refund.countDocuments({ sellerId, status: 'APPROVED' }),
      Refund.countDocuments({ sellerId, status: 'REJECTED' }),
    ]);

    res.status(200).json({
      status: true,
      statusCode: 200,
      message: 'L·∫•y danh s√°ch y√™u c·∫ßu ho√†n ti·ªÅn c·ªßa seller th√†nh c√¥ng',
      data: {
        refunds,
        stats: {
          pending: pendingCount,
          approved: approvedCount,
          rejected: rejectedCount,
          total: pendingCount + approvedCount + rejectedCount,
        },
      },
    });
  } catch (error) {
    console.error('ERROR getSellerRefundRequests:', error);
    res.status(500).json({
      status: false,
      statusCode: 500,
      message: 'L·ªói h·ªá th·ªëng',
      data: null,
    });
  }
};

// Seller xem chi ti·∫øt refund request c·ªßa document m√¨nh
exports.getSellerRefundDetails = async (req, res) => {
  try {
    const { id } = req.params;
    const sellerId = req.user._id;

    const refund = await Refund.findById(id)
      .populate('customerId', 'name email avatar')
      .populate('documentId', 'title price imageUrls description')
      .populate('processedBy', 'name email avatar')
      .populate('paymentId', 'createdAt transactionCode amount');

    if (!refund) {
      return res.status(404).json({
        status: false,
        statusCode: 404,
        message: 'Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu ho√†n ti·ªÅn',
        data: null,
      });
    }

    // Ki·ªÉm tra quy·ªÅn: ch·ªâ seller c·ªßa document m·ªõi ƒë∆∞·ª£c xem
    if (refund.sellerId.toString() !== sellerId.toString()) {
      return res.status(403).json({
        status: false,
        statusCode: 403,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem y√™u c·∫ßu ho√†n ti·ªÅn n√†y',
        data: null,
      });
    }

    res.status(200).json({
      status: true,
      statusCode: 200,
      message: 'L·∫•y chi ti·∫øt y√™u c·∫ßu ho√†n ti·ªÅn th√†nh c√¥ng',
      data: refund,
    });
  } catch (error) {
    console.error('ERROR getSellerRefundDetails:', error);
    res.status(500).json({
      status: false,
      statusCode: 500,
      message: 'L·ªói h·ªá th·ªëng',
      data: null,
    });
  }
};

// Seller l·∫•y th·ªëng k√™ refund c·ªßa m√¨nh
exports.getSellerRefundStats = async (req, res) => {
  try {
    const sellerId = req.user._id;
    const { startDate, endDate } = req.query;

    const dateFilter = { sellerId };
    if (startDate && endDate) {
      dateFilter.createdAt = {
        $gte: new Date(startDate),
        $lte: new Date(endDate),
      };
    }

    const [
      totalRefunds,
      pendingRefunds,
      approvedRefunds,
      rejectedRefunds,
      totalRefundAmount,
      approvedRefundAmount,
    ] = await Promise.all([
      Refund.countDocuments(dateFilter),
      Refund.countDocuments({ ...dateFilter, status: 'PENDING' }),
      Refund.countDocuments({ ...dateFilter, status: 'APPROVED' }),
      Refund.countDocuments({ ...dateFilter, status: 'REJECTED' }),
      Refund.aggregate([
        { $match: dateFilter },
        { $group: { _id: null, total: { $sum: '$amount' } } },
      ]),
      Refund.aggregate([
        { $match: { ...dateFilter, status: 'APPROVED' } },
        { $group: { _id: null, total: { $sum: '$amount' } } },
      ]),
    ]);

    // T√≠nh t·ª∑ l·ªá
    const approvalRate =
      totalRefunds > 0
        ? ((approvedRefunds / totalRefunds) * 100).toFixed(2)
        : 0;
    const rejectionRate =
      totalRefunds > 0
        ? ((rejectedRefunds / totalRefunds) * 100).toFixed(2)
        : 0;

    res.status(200).json({
      status: true,
      statusCode: 200,
      message: 'L·∫•y th·ªëng k√™ refund c·ªßa seller th√†nh c√¥ng',
      data: {
        totalRefunds,
        pendingRefunds,
        approvedRefunds,
        rejectedRefunds,
        totalRefundAmount: totalRefundAmount[0]?.total || 0,
        approvedRefundAmount: approvedRefundAmount[0]?.total || 0,
        approvalRate: parseFloat(approvalRate),
        rejectionRate: parseFloat(rejectionRate),
      },
    });
  } catch (error) {
    console.error('ERROR getSellerRefundStats:', error);
    res.status(500).json({
      status: false,
      statusCode: 500,
      message: 'L·ªói h·ªá th·ªëng',
      data: null,
    });
  }
};

module.exports = {
  createRefundRequest: exports.createRefundRequest,
  getMyRefundRequests: exports.getMyRefundRequests,
  getRefundDetails: exports.getRefundDetails,
  getAllRefundRequests: exports.getAllRefundRequests,
  processRefundRequest: exports.processRefundRequest,
  getRefundStats: exports.getRefundStats,
  getSellerRefundRequests: exports.getSellerRefundRequests,
  getSellerRefundDetails: exports.getSellerRefundDetails,
  getSellerRefundStats: exports.getSellerRefundStats,
};
