const Document = require('../models/Document');
const Enrollment = require('../models/Enrollment');
const Payment = require('../models/Payment');
const Commission = require('../models/Commission');
const SellerWallet = require('../models/SellerWallet');
const PlatformWallet = require('../models/PlatformWallet');
const WithdrawalRequest = require('../models/WithdrawalRequest');
const { createPayment } = require('../configs/payos');

const COMMISSION_RATE = 0.15; // 15% commission

exports.buyDocument = async (req, res) => {
  try {
    const { id } = req.params;

    // Check if document exists
    const document = await Document.findById(id).populate('author');
    if (!document) {
      return res.status(404).json({
        status: false,
        statusCode: 404,
        message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc',
        data: null,
      });
    }

    // Check if document is approved
    if (document.status !== 'APPROVED') {
      return res.status(400).json({
        status: false,
        statusCode: 400,
        message: 'Kh√≥a h·ªçc ch∆∞a ƒë∆∞·ª£c ph√™ duy·ªát',
        data: null,
      });
    }

    // Check if user has already bought this document
    const hasBought = await Enrollment.findOne({
      documentId: document._id,
      userId: req.user._id,
    });
    if (hasBought) {
      return res.status(400).json({
        status: false,
        statusCode: 400,
        message: 'B·∫°n ƒë√£ s·ªü h·ªØu kh√≥a h·ªçc n√†y',
        data: null,
      });
    }

    // Check if user is the seller
    if (document.author._id.toString() === req.user._id.toString()) {
      return res.status(400).json({
        status: false,
        statusCode: 400,
        message: 'B·∫°n kh√¥ng th·ªÉ mua kh√≥a h·ªçc c·ªßa ch√≠nh m√¨nh',
        data: null,
      });
    }

    // Create payment record
    const finalPrice = Number(document.price * (1 - document.discount / 100));
    const payment = new Payment({
      userId: req.user._id,
      documentId: document._id,
      sellerId: document.author._id,
      amount: finalPrice,
      status: 'PENDING',
    });
    await payment.save();

    // Create payment link with payment ID
    const paymentData = {
      ...document.toObject(),
      paymentId: payment._id,
    };
    const paymentLink = await createPayment(paymentData, req.user, finalPrice);
    console.log('üöÄ ~ exports.buyDocument= ~ paymentLink:', paymentLink);

    if (!paymentLink) {
      payment.status = 'FAILED';
      await payment.save();
      return res.status(500).json({
        status: false,
        statusCode: 500,
        message: 'Kh√¥ng th·ªÉ t·∫°o li√™n k·∫øt thanh to√°n',
        data: null,
      });
    }

    return res.status(200).json({
      status: true,
      statusCode: 200,
      message: 'T·∫°o li√™n k·∫øt thanh to√°n th√†nh c√¥ng',
      data: { paymentLink, paymentId: payment._id },
    });
  } catch (error) {
    console.error('üöÄ ~ buyDocument error:', error);
    return res.status(500).json({
      status: false,
      statusCode: 500,
      message: 'L·ªói h·ªá th·ªëng',
      data: null,
    });
  }
};

exports.getPaymentHistory = async (req, res) => {
  try {
    const id = req.user._id;
    const payment = await Payment.find({ userId: id }).populate('documentId');
    return res.status(200).json({
      status: true,
      statusCode: 200,
      message: 'L·∫•y danh s√°ch thanh to√°n th√†nh c√¥ng',
      data: payment,
    });
  } catch (error) {
    console.error('ERROR getPayment:', error);
    return res.status(500).json({
      status: false,
      statusCode: 500,
      message: 'L·ªói h·ªá th·ªëng',
      data: null,
    });
  }
};

// X·ª≠ l√Ω callback t·ª´ PayOS
exports.handlePaymentCallback = async (req, res) => {
  try {
    const { documentId, code, cancel, status, orderCode, paymentId } = req.body;

    if (code !== '00' || status !== 'PAID' || cancel === 'true') {
      // Payment failed or cancelled
      if (paymentId) {
        await Payment.findByIdAndUpdate(paymentId, {
          status: 'FAILED',
          transactionCode: orderCode || '',
        });
      }
      return res.status(200).json({
        status: true,
        statusCode: 200,
        message: 'Thanh to√°n th·∫•t b·∫°i',
        data: null,
      });
    }

    // Find payment record
    const payment = await Payment.findById(paymentId)
      .populate('documentId')
      .populate('sellerId')
      .populate('userId');

    if (!payment) {
      return res.status(200).json({
        status: true,
        statusCode: 200,
        message: 'Thanh to√°n th·∫•t b·∫°i',
        data: null,
      });
    }

    if (payment.status === 'COMPLETED') {
      // Already processed
      return res.status(200).json({
        status: true,
        statusCode: 200,
        message: 'Thanh to√°n th√†nh c√¥ng',
        data: null,
      });
    }

    // Update payment status
    payment.status = 'COMPLETED';
    payment.transactionCode = orderCode;
    await payment.save();

    // Create enrollment
    const enrollment = new Enrollment({
      userId: payment.userId._id,
      documentId: payment.documentId._id,
    });
    await enrollment.save();

    // Update document download count
    // await Document.findByIdAndUpdate(payment.documentId._id, {
    //   $inc: { download: 1 },
    // });

    // Calculate commission
    const totalAmount = payment.amount;
    const platformAmount = Math.floor(totalAmount * COMMISSION_RATE);
    const sellerAmount = totalAmount - platformAmount;

    // Create commission record
    const commission = new Commission({
      paymentId: payment._id,
      sellerId: payment.sellerId._id,
      platformFee: COMMISSION_RATE,
      sellerAmount,
      platformAmount,
      status: 'PENDING',
      releaseDate: new Date(Date.now() + 24 * 60 * 60 * 1000),
    });
    await commission.save();

    // Update or create seller wallet
    let sellerWallet = await SellerWallet.findOne({
      sellerId: payment.sellerId._id,
    });
    if (!sellerWallet) {
      sellerWallet = new SellerWallet({
        sellerId: payment.sellerId._id,
        pendingBalance: sellerAmount,
        totalEarned: sellerAmount,
      });
    } else {
      sellerWallet.pendingBalance += sellerAmount;
      sellerWallet.totalEarned += sellerAmount;
    }
    await sellerWallet.save();

    // Update or create platform wallet
    let platformWallet = await PlatformWallet.findOne();
    if (!platformWallet) {
      platformWallet = new PlatformWallet({
        totalBalance: platformAmount,
        availableBalance: 0,
        pendingBalance: platformAmount,
        totalCommissionEarned: platformAmount,
      });
    } else {
      platformWallet.totalBalance += platformAmount;
      platformWallet.pendingBalance += platformAmount;
      platformWallet.totalCommissionEarned += platformAmount;
    }
    await platformWallet.save();

    return res.status(200).json({
      status: true,
      statusCode: 200,
      message: 'Thanh to√°n th√†nh c√¥ng',
      data: null,
    });
  } catch (error) {
    console.error('ERROR handlePaymentCallback:', error);
    return res.status(500).json({
      status: false,
      statusCode: 500,
      message: 'L·ªói h·ªá th·ªëng',
      data: null,
    });
  }
};

// Seller t·∫°o y√™u c·∫ßu r√∫t ti·ªÅn
exports.createWithdrawalRequest = async (req, res) => {
  try {
    const { amount, bankDetails } = req.body;
    const sellerId = req.user._id;

    // Validate input
    if (!amount || amount <= 0) {
      return res.status(400).json({
        status: false,
        statusCode: 400,
        message: 'S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá',
        data: null,
      });
    }

    if (
      !bankDetails ||
      !bankDetails.bankName ||
      !bankDetails.bankAccountName ||
      !bankDetails.bankAccountNumber
    ) {
      return res.status(400).json({
        status: false,
        statusCode: 400,
        message: 'Th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng kh√¥ng ƒë·∫ßy ƒë·ªß',
        data: null,
      });
    }

    // Check seller wallet
    const sellerWallet = await SellerWallet.findOne({ sellerId });
    if (!sellerWallet || sellerWallet.availableBalance < amount) {
      return res.status(400).json({
        status: false,
        statusCode: 400,
        message: 'S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ r√∫t ti·ªÅn',
        data: null,
      });
    }

    // Create withdrawal request
    const withdrawalRequest = new WithdrawalRequest({
      sellerId,
      amount,
      bankDetails,
      status: 'PENDING',
    });
    await withdrawalRequest.save();

    // Update wallet - move from available to pending
    sellerWallet.availableBalance -= amount;
    await sellerWallet.save();

    return res.status(201).json({
      status: true,
      statusCode: 201,
      message: 'Y√™u c·∫ßu r√∫t ti·ªÅn ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
      data: withdrawalRequest,
    });
  } catch (error) {
    console.error('ERROR createWithdrawalRequest:', error);
    return res.status(500).json({
      status: false,
      statusCode: 500,
      message: 'L·ªói h·ªá th·ªëng',
      data: null,
    });
  }
};

// L·∫•y danh s√°ch y√™u c·∫ßu r√∫t ti·ªÅn c·ªßa seller v·ªõi th·ªëng k√™
exports.getMyWithdrawalRequests = async (req, res) => {
  try {
    const sellerId = req.user._id;
    const { status } = req.query;

    // Query c∆° b·∫£n
    const query = { sellerId };
    if (status) {
      query.status = status;
    }

    // L·∫•y t·∫•t c·∫£ withdrawal requests (b·ªè pagination)
    const withdrawalRequests = await WithdrawalRequest.find(query)
      .sort({ createdAt: -1 })
      .populate('processedBy', 'name email avatar');

    // Th·ªëng k√™ t·ªïng quan
    const statistics = await WithdrawalRequest.aggregate([
      { $match: { sellerId } },
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 },
          totalAmount: { $sum: '$amount' },
        },
      },
    ]);

    // T√≠nh to√°n th·ªëng k√™ chi ti·∫øt
    const stats = {
      total: await WithdrawalRequest.countDocuments({ sellerId }),
      pending: 0,
      rejected: 0,
      completed: 0,
      totalAmount: 0,
      pendingAmount: 0,
      rejectedAmount: 0,
      completedAmount: 0,
    };

    // X·ª≠ l√Ω d·ªØ li·ªáu th·ªëng k√™
    statistics.forEach((stat) => {
      const status = stat._id?.toLowerCase() || 'unknown';
      const count = stat.count || 0;
      const amount = stat.totalAmount || 0;

      if (status === 'pending') {
        stats.pending = count;
        stats.pendingAmount = amount;
      } else if (status === 'rejected') {
        stats.rejected = count;
        stats.rejectedAmount = amount;
      } else if (status === 'completed') {
        stats.completed = count;
        stats.completedAmount = amount;
      }

      stats.totalAmount += amount;
    });

    // Th·ªëng k√™ theo th·ªùi gian (30 ng√†y g·∫ßn nh·∫•t)
    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
    const recentStats = await WithdrawalRequest.aggregate([
      {
        $match: {
          sellerId,
          createdAt: { $gte: thirtyDaysAgo },
        },
      },
      {
        $group: {
          _id: {
            year: { $year: '$createdAt' },
            month: { $month: '$createdAt' },
            day: { $dayOfMonth: '$createdAt' },
          },
          count: { $sum: 1 },
          amount: { $sum: '$amount' },
        },
      },
      { $sort: { '_id.year': 1, '_id.month': 1, '_id.day': 1 } },
    ]);

    // Request g·∫ßn nh·∫•t
    const latestRequest = await WithdrawalRequest.findOne({ sellerId })
      .sort({ createdAt: -1 })
      .populate('processedBy', 'name email avatar');

    // T·ª∑ l·ªá th√†nh c√¥ng
    const successRate =
      stats.total > 0 ? ((stats.completed / stats.total) * 100).toFixed(2) : 0;

    return res.status(200).json({
      status: true,
      statusCode: 200,
      message: 'L·∫•y danh s√°ch y√™u c·∫ßu r√∫t ti·ªÅn th√†nh c√¥ng',
      data: {
        withdrawalRequests,
        statistics: {
          overview: stats,
          successRate: parseFloat(successRate),
          latestRequest: latestRequest
            ? {
                id: latestRequest._id,
                amount: latestRequest.amount,
                status: latestRequest.status,
                createdAt: latestRequest.createdAt,
                processedBy: latestRequest.processedBy,
              }
            : null,
        },
      },
    });
  } catch (error) {
    console.error('ERROR getMyWithdrawalRequests:', error);
    return res.status(500).json({
      status: false,
      statusCode: 500,
      message: 'L·ªói h·ªá th·ªëng',
      data: null,
    });
  }
};

// L·∫•y th√¥ng tin v√≠ c·ªßa seller
exports.getSellerWallet = async (req, res) => {
  try {
    const sellerId = req.user._id;

    let sellerWallet = await SellerWallet.findOne({ sellerId });
    if (!sellerWallet) {
      sellerWallet = new SellerWallet({
        sellerId,
        availableBalance: 0,
        pendingBalance: 0,
        totalEarned: 0,
        totalWithdrawn: 0,
      });
      await sellerWallet.save();
    }

    return res.status(200).json({
      status: true,
      statusCode: 200,
      message: 'L·∫•y th√¥ng tin v√≠ seller th√†nh c√¥ng',
      data: sellerWallet,
    });
  } catch (error) {
    console.error('ERROR getSellerWallet:', error);
    return res.status(500).json({
      status: false,
      statusCode: 500,
      message: 'L·ªói h·ªá th·ªëng',
      data: null,
    });
  }
};

// Cron job ƒë·ªÉ release commission sau 24h
exports.releaseCommissions = async () => {
  try {
    const now = new Date(Date.now());
    const Refund = require('../models/Refund');

    const commissionsToRelease = await Commission.find({
      status: 'PENDING',
      releaseDate: { $lte: now },
    });

    for (const commission of commissionsToRelease) {
      // Ki·ªÉm tra xem c√≥ refund request n√†o ƒëang pending cho payment n√†y kh√¥ng
      const pendingRefund = await Refund.findOne({
        paymentId: commission.paymentId,
        status: 'PENDING',
      });

      if (pendingRefund) {
        console.log(
          `‚è≥ Skipping commission release for payment ${commission.paymentId} - pending refund request exists`
        );
        continue;
      }

      // Update commission status
      commission.status = 'RELEASED';
      await commission.save();

      // Move money from pending to available in seller wallet
      const sellerWallet = await SellerWallet.findOne({
        sellerId: commission.sellerId,
      });
      if (sellerWallet) {
        sellerWallet.pendingBalance -= commission.sellerAmount;
        sellerWallet.availableBalance += commission.sellerAmount;
        await sellerWallet.save();
      }

      // Move platform commission from pending to available
      const platformWallet = await PlatformWallet.findOne();
      if (platformWallet) {
        platformWallet.pendingBalance -= commission.platformAmount;
        platformWallet.availableBalance += commission.platformAmount;
        await platformWallet.save();
        console.log(
          `üè¶ Released platform commission: ${commission.platformAmount} VND`
        );
      }
    }
  } catch (error) {
    console.error('ERROR releaseCommissions:', error);
  }
};

// L·∫•y danh s√°ch y√™u c·∫ßu r√∫t ti·ªÅn v·ªõi th·ªëng k√™ (d√†nh cho admin)
exports.getAllWithdrawalRequests = async (req, res) => {
  try {
    const { status } = req.query;

    // Query c∆° b·∫£n
    const query = {};
    if (status) {
      query.status = status;
    }

    // L·∫•y t·∫•t c·∫£ withdrawal requests
    const withdrawalRequests = await WithdrawalRequest.find(query)
      .sort({ createdAt: -1 })
      .populate('sellerId', 'name email avatar')
      .populate('processedBy', 'name email avatar');

    // Th·ªëng k√™ t·ªïng quan to√†n h·ªá th·ªëng
    const statistics = await WithdrawalRequest.aggregate([
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 },
          totalAmount: { $sum: '$amount' },
        },
      },
    ]);

    // T√≠nh to√°n th·ªëng k√™ chi ti·∫øt
    const stats = {
      total: await WithdrawalRequest.countDocuments(),
      pending: 0,
      rejected: 0,
      completed: 0,
      totalAmount: 0,
      pendingAmount: 0,
      rejectedAmount: 0,
      completedAmount: 0,
    };

    // X·ª≠ l√Ω d·ªØ li·ªáu th·ªëng k√™
    statistics.forEach((stat) => {
      const status = stat._id?.toLowerCase() || 'unknown';
      const count = stat.count || 0;
      const amount = stat.totalAmount || 0;

      if (status === 'pending') {
        stats.pending = count;
        stats.pendingAmount = amount;
      } else if (status === 'rejected') {
        stats.rejected = count;
        stats.rejectedAmount = amount;
      } else if (status === 'completed') {
        stats.completed = count;
        stats.completedAmount = amount;
      }

      stats.totalAmount += amount;
    });

    // Top sellers theo s·ªë l∆∞·ª£ng withdrawal requests
    const topSellers = await WithdrawalRequest.aggregate([
      {
        $group: {
          _id: '$sellerId',
          totalRequests: { $sum: 1 },
          totalAmount: { $sum: '$amount' },
          completedRequests: {
            $sum: { $cond: [{ $eq: ['$status', 'COMPLETED'] }, 1, 0] },
          },
          completedAmount: {
            $sum: { $cond: [{ $eq: ['$status', 'COMPLETED'] }, '$amount', 0] },
          },
        },
      },
      { $sort: { totalAmount: -1 } },
      { $limit: 10 },
      {
        $lookup: {
          from: 'users',
          localField: '_id',
          foreignField: '_id',
          as: 'seller',
        },
      },
      {
        $project: {
          sellerId: '$_id',
          sellerName: { $arrayElemAt: ['$seller.name', 0] },
          sellerEmail: { $arrayElemAt: ['$seller.email', 0] },
          sellerAvatar: { $arrayElemAt: ['$seller.avatar', 0] },
          totalRequests: 1,
          totalAmount: 1,
          completedRequests: 1,
          completedAmount: 1,
        },
      },
    ]);

    // Th·ªëng k√™ theo th·ªùi gian (30 ng√†y g·∫ßn nh·∫•t)
    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
    const dailyStats = await WithdrawalRequest.aggregate([
      {
        $match: {
          createdAt: { $gte: thirtyDaysAgo },
        },
      },
      {
        $group: {
          _id: {
            year: { $year: '$createdAt' },
            month: { $month: '$createdAt' },
            day: { $dayOfMonth: '$createdAt' },
          },
          count: { $sum: 1 },
          amount: { $sum: '$amount' },
          pending: {
            $sum: { $cond: [{ $eq: ['$status', 'PENDING'] }, 1, 0] },
          },
          completed: {
            $sum: { $cond: [{ $eq: ['$status', 'COMPLETED'] }, 1, 0] },
          },
        },
      },
      { $sort: { '_id.year': 1, '_id.month': 1, '_id.day': 1 } },
    ]);

    // Request c·∫ßn x·ª≠ l√Ω g·∫•p (pending l√¢u nh·∫•t)
    const urgentRequests = await WithdrawalRequest.find({ status: 'PENDING' })
      .sort({ createdAt: 1 })
      .limit(5)
      .populate('sellerId', 'name email avatar');

    // T·ª∑ l·ªá th√†nh c√¥ng v√† processing time
    const successRate =
      stats.total > 0 ? ((stats.completed / stats.total) * 100).toFixed(2) : 0;

    // T√≠nh average processing time cho c√°c requests ƒë√£ completed
    const avgProcessingTime = await WithdrawalRequest.aggregate([
      {
        $match: {
          status: 'COMPLETED',
          updatedAt: { $exists: true },
        },
      },
      {
        $project: {
          processingTime: {
            $divide: [
              { $subtract: ['$updatedAt', '$createdAt'] },
              1000 * 60 * 60, // Convert to hours
            ],
          },
        },
      },
      {
        $group: {
          _id: null,
          avgTime: { $avg: '$processingTime' },
        },
      },
    ]);

    return res.status(200).json({
      status: true,
      statusCode: 200,
      message: 'L·∫•y danh s√°ch y√™u c·∫ßu r√∫t ti·ªÅn th√†nh c√¥ng',
      data: {
        withdrawalRequests,
        statistics: {
          overview: stats,
          successRate: parseFloat(successRate),
          avgProcessingTime: avgProcessingTime[0]?.avgTime?.toFixed(2) || 0,
          topSellers,
          dailyStats: dailyStats.map((item) => ({
            date: `${item._id.year}-${String(item._id.month).padStart(
              2,
              '0'
            )}-${String(item._id.day).padStart(2, '0')}`,
            count: item.count,
            amount: item.amount,
            pending: item.pending,
            completed: item.completed,
          })),
          urgentRequests: urgentRequests.map((req) => ({
            id: req._id,
            seller: req.sellerId,
            amount: req.amount,
            createdAt: req.createdAt,
            daysPending: Math.floor(
              (Date.now() - req.createdAt) / (1000 * 60 * 60 * 24)
            ),
          })),
        },
      },
    });
  } catch (error) {
    console.error('ERROR getAllWithdrawalRequests:', error);
    return res.status(500).json({
      status: false,
      statusCode: 500,
      message: 'L·ªói h·ªá th·ªëng',
      data: null,
    });
  }
};

// X·ª≠ l√Ω y√™u c·∫ßu r√∫t ti·ªÅn
exports.processWithdrawalRequest = async (req, res) => {
  try {
    const { id } = req.params;
    const { status, notes } = req.body;
    const adminId = req.user._id;

    if (!['APPROVED', 'REJECTED'].includes(status)) {
      return res.status(400).json({
        status: false,
        statusCode: 400,
        message: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá',
        data: null,
      });
    }

    const withdrawalRequest = await WithdrawalRequest.findById(id)
      .populate('sellerId', 'name email avatar')
      .populate('processedBy', 'name email avatar');
    if (!withdrawalRequest) {
      return res.status(404).json({
        status: false,
        statusCode: 404,
        message: 'Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu r√∫t ti·ªÅn',
        data: null,
      });
    }

    if (withdrawalRequest.status !== 'PENDING') {
      return res.status(400).json({
        status: false,
        statusCode: 400,
        message: 'Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω',
        data: null,
      });
    }

    // Update withdrawal request
    withdrawalRequest.status = status;
    withdrawalRequest.processedBy = adminId;
    withdrawalRequest.notes = notes;
    await withdrawalRequest.save();

    const sellerWallet = await SellerWallet.findOne({
      sellerId: withdrawalRequest.sellerId,
    });

    if (status === 'APPROVED') {
      if (sellerWallet) {
        sellerWallet.totalWithdrawn += withdrawalRequest.amount;
        await sellerWallet.save();
      }

      withdrawalRequest.status = 'COMPLETED';
      await withdrawalRequest.save();
    } else if (status === 'REJECTED') {
      if (sellerWallet) {
        sellerWallet.availableBalance += withdrawalRequest.amount;
        await sellerWallet.save();
      }
    }

    return res.status(200).json({
      status: true,
      statusCode: 200,
      message: `Y√™u c·∫ßu r√∫t ti·ªÅn ƒë√£ ƒë∆∞·ª£c ${
        status === 'APPROVED' ? 'ph√™ duy·ªát' : 't·ª´ ch·ªëi'
      }`,
      data: withdrawalRequest,
    });
  } catch (error) {
    console.error('ERROR processWithdrawalRequest:', error);
    return res.status(500).json({
      status: false,
      statusCode: 500,
      message: 'L·ªói h·ªá th·ªëng',
      data: null,
    });
  }
};

exports.getPlatformWallet = async (req, res) => {
  try {
    const Refund = require('../models/Refund');
    const WithdrawalRequest = require('../models/WithdrawalRequest');
    const Commission = require('../models/Commission');

    let platformWallet = await PlatformWallet.findOne();
    if (!platformWallet) {
      platformWallet = new PlatformWallet({
        totalBalance: 0,
        availableBalance: 0,
        pendingBalance: 0,
        totalCommissionEarned: 0,
        totalRefunded: 0,
        totalWithdrawals: 0,
      });
      await platformWallet.save();
    }

    // T√≠nh to√°n th·ªùi gian 24h tr∆∞·ªõc
    const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);

    // 1. totalBalance: T·ªïng s·ªë ti·ªÅn c√°c customer ƒë√£ chuy·ªÉn (t·∫•t c·∫£ payments completed)
    const totalBalanceAmount = await Payment.aggregate([
      {
        $match: {
          status: 'COMPLETED',
        },
      },
      {
        $group: {
          _id: null,
          totalAmount: { $sum: '$amount' },
        },
      },
    ]);

    // 2. pendingBalance: T·ªïng s·ªë ti·ªÅn customer mua trong 24h g·∫ßn nh·∫•t
    const pendingBalanceAmount = await Payment.aggregate([
      {
        $match: {
          status: 'COMPLETED',
          createdAt: { $gte: twentyFourHoursAgo },
        },
      },
      {
        $group: {
          _id: null,
          totalAmount: { $sum: '$amount' },
        },
      },
    ]);

    // 3. totalCommissionEarned: T·ªïng hoa h·ªìng 15% sau 24h customer mua
    const totalCommissionAmount = await Payment.aggregate([
      {
        $match: {
          status: 'COMPLETED',
          createdAt: { $lt: twentyFourHoursAgo },
        },
      },
      {
        $group: {
          _id: null,
          totalAmount: { $sum: '$platformAmount' },
        },
      },
    ]);

    // 4. totalRefunded: T·ªïng s·ªë ti·ªÅn ƒë√£ ho√†n tr·∫£
    const totalRefundedAmount = await Refund.aggregate([
      {
        $match: {
          status: 'APPROVED',
          refundCompletedAt: { $exists: true, $ne: null },
        },
      },
      {
        $group: {
          _id: null,
          totalAmount: { $sum: '$amount' },
        },
      },
    ]);

    // 5. totalWithdrawals: T·ªïng s·ªë ti·ªÅn ƒë√£ r√∫t
    const totalWithdrawalsAmount = await WithdrawalRequest.aggregate([
      {
        $match: {
          status: 'COMPLETED',
        },
      },
      {
        $group: {
          _id: null,
          totalAmount: { $sum: '$amount' },
        },
      },
    ]);

    // T√≠nh to√°n c√°c gi√° tr·ªã
    const calculatedTotalBalance = totalBalanceAmount[0]?.totalAmount || 0;
    const calculatedPendingBalance = pendingBalanceAmount[0]?.totalAmount || 0;
    const calculatedTotalCommission =
      totalCommissionAmount[0]?.totalAmount || 0;
    const calculatedTotalRefunded = totalRefundedAmount[0]?.totalAmount || 0;
    const calculatedTotalWithdrawals =
      totalWithdrawalsAmount[0]?.totalAmount || 0;

    // availableBalance: S·ªë ti·ªÅn platform th·ª±c s·ª± c√≥ th·ªÉ s·ª≠ d·ª•ng sau khi ho√†n t·∫•t m·ªçi th·ª©
    // = totalCommissionEarned (hoa h·ªìng sau 24h) - totalRefunded (ƒë√£ ho√†n tr·∫£)
    // ƒê·∫£m b·∫£o kh√¥ng bao gi·ªù √¢m
    const calculatedAvailableBalance = Math.max(
      0,
      calculatedTotalCommission - calculatedTotalRefunded
    );

    // C·∫≠p nh·∫≠t v√†o database n·∫øu c√≥ s·ª± kh√°c bi·ªát
    let shouldUpdate = false;
    const updates = {};

    if (platformWallet.totalBalance !== calculatedTotalBalance) {
      updates.totalBalance = calculatedTotalBalance;
      shouldUpdate = true;
    }

    if (platformWallet.availableBalance !== calculatedAvailableBalance) {
      updates.availableBalance = calculatedAvailableBalance;
      shouldUpdate = true;
    }

    if (platformWallet.pendingBalance !== calculatedPendingBalance) {
      updates.pendingBalance = calculatedPendingBalance;
      shouldUpdate = true;
    }

    if (platformWallet.totalCommissionEarned !== calculatedTotalCommission) {
      updates.totalCommissionEarned = calculatedTotalCommission;
      shouldUpdate = true;
    }

    if (platformWallet.totalRefunded !== calculatedTotalRefunded) {
      updates.totalRefunded = calculatedTotalRefunded;
      shouldUpdate = true;
    }

    if (platformWallet.totalWithdrawals !== calculatedTotalWithdrawals) {
      updates.totalWithdrawals = calculatedTotalWithdrawals;
      shouldUpdate = true;
    }

    if (shouldUpdate) {
      platformWallet = await PlatformWallet.findOneAndUpdate(
        {},
        { $set: updates },
        { new: true, upsert: true }
      );
    }

    // Th√™m th·ªëng k√™ chi ti·∫øt
    const statistics = {
      // S·ªë l∆∞·ª£ng giao d·ªãch
      totalPaymentCount: await Payment.countDocuments({ status: 'COMPLETED' }),
      pendingPaymentCount: await Payment.countDocuments({
        status: 'COMPLETED',
        createdAt: { $gte: twentyFourHoursAgo },
      }),

      // S·ªë l∆∞·ª£ng ho√†n ti·ªÅn
      totalRefundCount: await Refund.countDocuments({ status: 'APPROVED' }),
      pendingRefundCount: await Refund.countDocuments({ status: 'PENDING' }),

      // S·ªë l∆∞·ª£ng r√∫t ti·ªÅn
      totalWithdrawalCount: await WithdrawalRequest.countDocuments({
        status: 'COMPLETED',
      }),
      pendingWithdrawalCount: await WithdrawalRequest.countDocuments({
        status: 'PENDING',
      }),

      // T·ª∑ l·ªá v√† th·ªëng k√™ kh√°c
      refundRate:
        calculatedTotalBalance > 0
          ? ((calculatedTotalRefunded / calculatedTotalBalance) * 100).toFixed(
              2
            )
          : 0,
      withdrawalRate:
        calculatedTotalBalance > 0
          ? (
              (calculatedTotalWithdrawals / calculatedTotalBalance) *
              100
            ).toFixed(2)
          : 0,
      commissionRate:
        calculatedTotalBalance > 0
          ? (
              (calculatedTotalCommission / calculatedTotalBalance) *
              100
            ).toFixed(2)
          : 0,
      pendingRate:
        calculatedTotalBalance > 0
          ? ((calculatedPendingBalance / calculatedTotalBalance) * 100).toFixed(
              2
            )
          : 0,
      availableRate:
        calculatedTotalBalance > 0
          ? (
              (calculatedAvailableBalance / calculatedTotalBalance) *
              100
            ).toFixed(2)
          : 0,
    };

    const responseData = {
      ...platformWallet.toObject(),
      statistics,
    };

    return res.status(200).json({
      status: true,
      statusCode: 200,
      message: 'L·∫•y th√¥ng tin v√≠ platform th√†nh c√¥ng',
      data: responseData,
    });
  } catch (error) {
    console.error('ERROR getPlatformWallet:', error);
    return res.status(500).json({
      status: false,
      statusCode: 500,
      message: 'L·ªói h·ªá th·ªëng',
      data: null,
    });
  }
};

// L·∫•y th·ªëng k√™ payment
exports.getPaymentStats = async (req, res) => {
  try {
    const { startDate, endDate } = req.query;

    const dateFilter = {};
    if (startDate && endDate) {
      dateFilter.createdAt = {
        $gte: new Date(startDate),
        $lte: new Date(endDate),
      };
    }

    const [
      totalPayments,
      completedPayments,
      totalRevenue,
      platformRevenue,
      totalCommissions,
      pendingWithdrawals,
    ] = await Promise.all([
      Payment.countDocuments({ ...dateFilter }),
      Payment.countDocuments({ ...dateFilter, status: 'COMPLETED' }),
      Payment.aggregate([
        { $match: { ...dateFilter, status: 'COMPLETED' } },
        { $group: { _id: null, total: { $sum: '$amount' } } },
      ]),
      Commission.aggregate([
        { $match: { ...dateFilter } },
        { $group: { _id: null, total: { $sum: '$platformAmount' } } },
      ]),
      Commission.countDocuments({ ...dateFilter }),
      WithdrawalRequest.aggregate([
        { $match: { status: 'PENDING' } },
        { $group: { _id: null, total: { $sum: '$amount' } } },
      ]),
    ]);

    return res.status(200).json({
      status: true,
      statusCode: 200,
      message: 'L·∫•y th·ªëng k√™ payment th√†nh c√¥ng',
      data: {
        totalPayments,
        completedPayments,
        totalRevenue: totalRevenue[0]?.total || 0,
        platformRevenue: platformRevenue[0]?.total || 0,
        totalCommissions,
        pendingWithdrawals: pendingWithdrawals[0]?.total || 0,
      },
    });
  } catch (error) {
    console.error('ERROR getPaymentStats:', error);
    return res.status(500).json({
      status: false,
      statusCode: 500,
      message: 'L·ªói h·ªá th·ªëng',
      data: null,
    });
  }
};

// L·∫•y danh s√°ch kh√≥a h·ªçc ƒë√£ mua
exports.getMyPurchasedDocuments = async (req, res) => {
  try {
    const userId = req.user._id;
    const { page = 1, limit = 10 } = req.query;
    const skip = (parseInt(page) - 1) * parseInt(limit);

    // Fetch enrollments with populated document, author, and interests
    const enrollments = await Enrollment.find({ userId })
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(parseInt(limit))
      .populate({
        path: 'documentId',
        match: { price: { $gt: 0 } }, // Only include documents with price > 0
        populate: [
          {
            path: 'author',
            select: 'name email avatar',
          },
          {
            path: 'interests',
            select: 'name emoji',
          },
        ],
      })
      .populate('userId', 'name email avatar')
      .lean();

    // Filter out enrollments where documentId is null (due to price filter)
    const validEnrollments = enrollments.filter(
      (enrollment) => enrollment.documentId
    );

    // Count total enrollments with non-free documents
    const total = await Enrollment.countDocuments({
      userId,
      documentId: {
        $in: await Document.find({ price: { $gt: 0 } }).distinct('_id'),
      },
    });

    return res.status(200).json({
      status: true,
      statusCode: 200,
      message: 'L·∫•y danh s√°ch kh√≥a h·ªçc ƒë√£ mua th√†nh c√¥ng',
      data: {
        documents: validEnrollments.map((enrollment) => ({
          ...enrollment.documentId,
          purchaseDate: enrollment.createdAt, // Include purchase date
        })),
        totalPages: Math.ceil(total / parseInt(limit)),
        currentPage: parseInt(page),
        total,
      },
    });
  } catch (error) {
    console.error('ERROR getMyPurchasedDocuments:', error);
    return res.status(500).json({
      status: false,
      statusCode: 500,
      message: 'L·ªói h·ªá th·ªëng',
      data: null,
    });
  }
};

// Ki·ªÉm tra payment c√≥ th·ªÉ refund ƒë∆∞·ª£c kh√¥ng
exports.checkRefundEligibility = async (req, res) => {
  try {
    const { paymentId } = req.params;
    const userId = req.user._id;

    const payment = await Payment.findById(paymentId);
    if (!payment) {
      return res.status(404).json({
        status: false,
        statusCode: 404,
        message: 'Kh√¥ng t√¨m th·∫•y thanh to√°n',
        data: null,
      });
    }

    // Ki·ªÉm tra quy·ªÅn c·ªßa customer
    if (payment.userId.toString() !== userId.toString()) {
      return res.status(403).json({
        status: false,
        statusCode: 403,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn ki·ªÉm tra thanh to√°n n√†y',
        data: null,
      });
    }

    const Refund = require('../models/Refund');
    const { canRefund, reason } = await Refund.canCreateRefund(paymentId);

    // Th√™m th√¥ng tin v·ªÅ th·ªùi gian c√≤n l·∫°i
    const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
    const hoursRemaining = canRefund
      ? Math.max(
          0,
          Math.ceil(
            (payment.createdAt.getTime() +
              24 * 60 * 60 * 1000 -
              new Date(Date.now())) /
              (60 * 60 * 1000)
          )
        )
      : 0;

    return res.status(200).json({
      status: true,
      statusCode: 200,
      message: 'Ki·ªÉm tra t√¨nh tr·∫°ng ho√†n ti·ªÅn th√†nh c√¥ng',
      data: {
        canRefund,
        reason: canRefund ? 'C√≥ th·ªÉ t·∫°o y√™u c·∫ßu ho√†n ti·ªÅn' : reason,
        payment: {
          id: payment._id,
          amount: payment.amount,
          status: payment.status,
          createdAt: payment.createdAt,
        },
        hoursRemaining,
      },
    });
  } catch (error) {
    console.error('ERROR checkRefundEligibility:', error);
    return res.status(500).json({
      status: false,
      statusCode: 500,
      message: 'L·ªói h·ªá th·ªëng',
      data: null,
    });
  }
};

// L·∫•y danh s√°ch payments c√≥ th·ªÉ refund
exports.getRefundablePayments = async (req, res) => {
  try {
    const userId = req.user._id;

    // T√¨m payments trong v√≤ng 24h v√† status COMPLETED
    const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);

    const payments = await Payment.find({
      userId,
      status: 'COMPLETED',
      createdAt: { $gte: twentyFourHoursAgo },
    })
      .sort({ createdAt: -1 })
      .populate('documentId', 'title price imageUrls')
      .populate('sellerId', 'name email avatar');

    const Refund = require('../models/Refund');

    // T√¨m t·∫•t c·∫£ refund requests ƒë√£ b·ªã REJECTED c·ªßa user
    const rejectedRefunds = await Refund.find({
      customerId: userId,
      status: 'REJECTED',
    }).select('paymentId');

    const rejectedPaymentIds = new Set(
      rejectedRefunds.map((refund) => refund.paymentId.toString())
    );

    // Ki·ªÉm tra t·ª´ng payment xem c√≥ th·ªÉ refund kh√¥ng
    const refundablePayments = await Promise.all(
      payments.map(async (payment) => {
        // N·∫øu payment ƒë√£ c√≥ refund request b·ªã REJECTED th√¨ kh√¥ng hi·ªÉn th·ªã
        if (rejectedPaymentIds.has(payment._id.toString())) {
          return null;
        }

        const { canRefund, reason } = await Refund.canCreateRefund(payment._id);
        const hoursRemaining = Math.max(
          0,
          Math.ceil(
            (payment.createdAt.getTime() +
              24 * 60 * 60 * 1000 -
              new Date(Date.now())) /
              (60 * 60 * 1000)
          )
        );

        return {
          ...payment.toObject(),
          canRefund,
          reason: canRefund ? 'C√≥ th·ªÉ t·∫°o y√™u c·∫ßu ho√†n ti·ªÅn' : reason,
          hoursRemaining,
        };
      })
    );

    // L·ªçc b·ªè c√°c payment b·ªã lo·∫°i tr·ª´ (null)
    const filteredPayments = refundablePayments.filter(
      (payment) => payment !== null
    );

    return res.status(200).json({
      status: true,
      statusCode: 200,
      message: 'L·∫•y danh s√°ch thanh to√°n c√≥ th·ªÉ ho√†n ti·ªÅn th√†nh c√¥ng',
      data: filteredPayments,
    });
  } catch (error) {
    console.error('ERROR getRefundablePayments:', error);
    return res.status(500).json({
      status: false,
      statusCode: 500,
      message: 'L·ªói h·ªá th·ªëng',
      data: null,
    });
  }
};
